{
knots2 <- seq(step, 1-step, step)
}
yhat13 <- lm(y~bs(x, knots = knots2))$fitted.values
mse[13] <- mean((yhat13-f(x))^2)
return(mse)
}
ns <- c(100, 200, 300, 500, 750, 1000)
reps <- 10
msePar <- c()
mseNonPar <- c()
for (n in ns)
{
mse <- apply(replicate(reps, sim.p3(fA, n)), mean, MARGIN = 1)
msePar <- c(msePar, mse[c(1:5, 12, 13)])
mseNonPar <- c(mseNonPar, mse[6:11])
}
local_poly <- function(formula, bandwidth, kernel = box_kernel, new_x = NULL, envir = environment())
{
mat <- model.matrix(formula)
x <- mat[,2]
y <- eval(formula[[2]], envir = envir)
if (is.null(new_x))
{
new_x <- x
}
pred <- rep(NA, length(new_x))
n <- length(x)
k <- dim(mat)[2] - 1
eval_x0 <-function(x0, x, y, kernel, h)
{Z <-outer((x-x0)/h,  0:k, "^")
Ztw <-t(apply(Z, 2, "*", kernel(x-x0, h)))
tryCatch({
solve(Ztw%*%Z, Ztw%*%y)[1]
},
error = function(cond){
return(NA)
})
}
return(as.vector(sapply(new_x, eval_x0, x = x, y = y, kernel = kernel, h = bandwidth)))
}
ns <- c(100, 200, 300, 500, 750, 1000)
reps <- 10
msePar <- c()
mseNonPar <- c()
for (n in ns)
{
mse <- apply(replicate(reps, sim.p3(fA, n)), mean, MARGIN = 1)
msePar <- c(msePar, mse[c(1:5, 12, 13)])
mseNonPar <- c(mseNonPar, mse[6:11])
}
cv_spline <- function(x, y, type = "b")
{
#randomize groups
n <- length(y)
samp <- sample(n)%%5 + 1
cvErr <- rep(NA, 11)
for (nknots in 0:10)
{
valErr <- rep(NA, 5)
step <- 1/(nknots+1)
for (i in 1:5)
{
valIds <- which(samp == i)
xtr <- x[-valIds]
ytr <- y[-valIds]
xval <- x[valIds]
yval <- y[valIds]
if (nknots == 0)
{
knots <- NULL
}
else
{
knots <- seq(step, 1-step, step)
}
if (type == "b")
{
fit <- lm(ytr~bs(xtr, knots = knots))
}
else
{
fit <- lm(ytr~ns(xtr, knots = knots))
}
yhat <- predict(fit, newdata = data.frame(xtr = xval))
valErr[i] <- mean((yval-yhat)^2)
}
cvErr[nknots+1] <- mean(valErr)
}
return(cvErr)
}
ns <- c(100, 200, 300, 500, 750, 1000)
reps <- 10
msePar <- c()
mseNonPar <- c()
for (n in ns)
{
mse <- apply(replicate(reps, sim.p3(fA, n)), mean, MARGIN = 1)
msePar <- c(msePar, mse[c(1:5, 12, 13)])
mseNonPar <- c(mseNonPar, mse[6:11])
}
bsfit=lm(y~bs(x, df=3))
predict(bsfit, newdata=data.frame(x=runif(10)))
predict(bsfit, newdata=data.frame(x=seq(0.1,0.9,0.1))
)
polyfit=lm(y~poly(x, degree=3))
predict(polyfit, newdata=data.frame(x=seq(0.1,0.9,0.1))
)
bsfit2=lm(y~bs(x, df=4))
predict(bsfit2, newdata=data.frame(x=seq(0.1,0.9,0.1)))
box_kernel <- function(x, h)
{
return(1*(abs(x/h)<=(1/2)))
}
gaussian_kernel <- function(x, h)
{
x <- x/h
return((1/(sqrt(2*pi)))*exp(-x^2/2))
}
cv_spline <- function(x, y, type = "b")
{
#randomize groups
n <- length(y)
samp <- sample(n)%%5 + 1
cvErr <- rep(NA, 21)
for (nknots in 0:20)
{
valErr <- rep(NA, 5)
step <- 1/(nknots+1)
for (i in 1:5)
{
valIds <- which(samp == i)
xtr <- x[-valIds]
ytr <- y[-valIds]
xval <- x[valIds]
yval <- y[valIds]
if (type == "b")
{
fit <- lm(ytr~bs(xtr, df = nknots + 3))
}
else
{
fit <- lm(ytr~ns(xtr, df = nknots + 3))
}
yhat <- predict(fit, newdata = data.frame(xtr = xval))
valErr[i] <- mean((yval-yhat)^2)
}
cvErr[nknots+1] <- mean(valErr)
}
return(cvErr)
}
cv_kfold <- function(x, y, hs, k, kernel = "box", deg = NULL)
{
#randomize groups
n <- length(y)
samp <- sample(n)%%k + 1
cvErr <- rep(NA, length(hs))
for (h in 1:length(hs))
{
valErr <- rep(NA, k)
bw <- hs[h]
for (i in 1:k)
{
valIds <- which(samp == i)
xtr <- x[-valIds]
ytr <- y[-valIds]
xval <- x[valIds]
yval <- y[valIds]
if (is.null(deg))
{
fit <- ksmooth(xtr, ytr, kernel = kernel, bandwidth = bw, x.points = xval)
yhat <- fit$y
yval <- yval[order(xval)]
}
else
{
if (deg == 1)
{
fm <- formula(ytr~xtr)
}
else
{
fm <- formula(ytr~xtr+I(xtr^2))
}
if (kernel == "box")
{
kernFunc = box_kernel
}
else
{
kernFunc = gaussian_kernel
}
yhat <- local_poly(fm, bw, kernel = kernFunc, new_x = xval, envir = environment())
}
#compute MSE on validation set
mse <- mean((yval - yhat)^2, na.rm = T)
valErr[i] <- mse
}
cvErr[h] <- mean(valErr)
}
return(cvErr)
}
get_opt_h <- function(x, y, hs, k, kernel, deg = NULL)
{
cvErr <- cv_kfold(x, y, hs, k, kernel, deg)
return(hs[which(cvErr == min(cvErr))])
}
local_poly <- function(formula, bandwidth, kernel = box_kernel, new_x = NULL, envir = environment())
{
mat <- model.matrix(formula)
x <- mat[,2]
y <- eval(formula[[2]], envir = envir)
if (is.null(new_x))
{
new_x <- x
}
pred <- rep(NA, length(new_x))
n <- length(x)
k <- dim(mat)[2] - 1
eval_x0 <-function(x0, x, y, kernel, h)
{Z <-outer((x-x0)/h,  0:k, "^")
Ztw <-t(apply(Z, 2, "*", kernel(x-x0, h)))
tryCatch({
solve(Ztw%*%Z, Ztw%*%y)[1]
},
error = function(cond){
return(NA)
})
}
return(as.vector(sapply(new_x, eval_x0, x = x, y = y, kernel = kernel, h = bandwidth)))
}
#Problem 2 setup
fA <- function(x)
{
return(2*x)
}
fB <- function(x)
{
return(sin(x*pi))
}
fC <- function(x)
{
return(2*x+x^3-6*x^4)
}
fD <- function(x)
{
return(sin(100*x))
}
sim.p3 <- function(f, n)
{
x <- runif(n)
err <- rnorm(n)
y <- f(x) + err
hs = seq(0.05, 0.6, 0.01)
mse <- rep(NA, 13)
yhat1 <- lm(y~x)$fitted.values
mse[1] <- mean((yhat1-f(x))^2)
for (d in 2:5)
{
yhatd <- lm(y~poly(x, d))$fitted.values
mse[d] <- mean((yhatd - f(x))^2)
}
#choose optimal bandwidth first
bw1 <- get_opt_h(x, y, hs, 5, "box")
nwbox <- ksmooth(x, y, kernel="box", bandwidth = bw1, x.points = x)
yhat6 <- nwbox$y
mse[6] <- mean((yhat6 - f(nwbox$x))^2)
bw2 <- get_opt_h(x, y, hs, 5, "normal")
nwgauss <- ksmooth(x, y, kernel="normal", bandwidth = bw2, x.points = x)
yhat7 <- nwgauss$y
mse[7] <- mean((yhat7 - f(nwgauss$x))^2)
fm1 <- formula(y~x)
fm2 <- formula(y~x+I(x^2))
bw3 <- get_opt_h(x, y, hs, 5, "box", 1)
yhat8 <- local_poly(fm1, bw3, kernel = box_kernel, envir = environment())
mse[8] <- mean((yhat8 - f(x))^2)
bw4 <- get_opt_h(x, y, hs, 5, "box", 2)
yhat9 <- local_poly(fm2, bw4, kernel = box_kernel, envir = environment())
mse[9] <- mean((yhat9 - f(x))^2)
bw5 <- get_opt_h(x, y, hs, 5, "normal", 1)
yhat10 <- local_poly(fm1, bw5, kernel = gaussian_kernel, envir = environment())
mse[10] <- mean((yhat10 - f(x))^2)
bw6 <- get_opt_h(x, y, hs, 5, "normal", 2)
yhat11 <- local_poly(fm2, bw6, kernel = gaussian_kernel, envir = environment())
mse[11] <- mean((yhat11 - f(x))^2)
#b-spline
cvBSpline <- cv_spline(x, y)
nknots1 <- order(cvBSpline)[1]-1
yhat12 <- lm(y~bs(x, df = nknots1 + 3))$fitted.values
mse[12] <- mean((yhat12-f(x))^2)
#natural spline
cvNSpline <- cv_spline(x, y, type = "n")
nknots2 <- order(cvNSpline)[1]-1
yhat13 <- lm(y~bs(x, df = nknots2 + 3))$fitted.values
mse[13] <- mean((yhat13-f(x))^2)
return(mse)
}
ns <- c(100, 200, 300, 500)
reps <- 3
msePar <- c()
mseNonPar <- c()
for (n in ns)
{
mse <- apply(replicate(reps, sim.p3(fA, n)), mean, MARGIN = 1)
msePar <- c(msePar, mse[c(1:5, 12, 13)])
mseNonPar <- c(mseNonPar, mse[6:11])
}
sim.p3(fA, 100)
sim.p3(fA, 500)
sim.p3(fB, 1000)
ns <- c(100, 200, 300, 500)
reps <- 2
msePar <- c()
mseNonPar <- c()
for (n in ns)
{
mse <- apply(replicate(reps, sim.p3(fA, n)), mean, MARGIN = 1)
msePar <- c(msePar, mse[c(1:5, 12, 13)])
mseNonPar <- c(mseNonPar, mse[6:11])
}
ggplot(data = data.frame(x = rep(ns, each = 7), y = msePar, fit = rep(c("linear", "poly 2", "poly 3", "poly 4", "poly 5", "bs", "ns"), length(ns))), aes(x = x, y = y, colour = fit)) + geom_point() + geom_line() + scale_y_log10()
ggplot(data = data.frame(x = rep(ns, each = 6), y = mseNonPar, fit = rep(c("NW box", "NW gauss", "LP box 1", "LP box 2", "LP gauss 1", "LP gauss 2"), length(ns))), aes(x = x, y = y, colour = fit)) + geom_point() + geom_line() + scale_y_log10()
warnings()
ggplot(data = data.frame(x = rep(ns, each = 7), y = msePar, fit = rep(c("linear", "poly 2", "poly 3", "poly 4", "poly 5", "bs", "ns"), length(ns))), aes(x = x, y = y, colour = fit)) + geom_point() + geom_line() + scale_y_log10()
?cv.glmnet
sim.p3(fD, 1000)
x=runif(1000)
y=fD(x)+rnorm(1000)
cv_spline(x, y)
cv_spline <- function(x, y, type = "b")
{
#randomize groups
n <- length(y)
samp <- sample(n)%%5 + 1
cvErr <- rep(NA, 21)
for (nknots in 0:40)
{
valErr <- rep(NA, 5)
step <- 1/(nknots+1)
for (i in 1:5)
{
valIds <- which(samp == i)
xtr <- x[-valIds]
ytr <- y[-valIds]
xval <- x[valIds]
yval <- y[valIds]
if (type == "b")
{
fit <- lm(ytr~bs(xtr, df = nknots + 3))
}
else
{
fit <- lm(ytr~ns(xtr, df = nknots + 3))
}
yhat <- predict(fit, newdata = data.frame(xtr = xval))
valErr[i] <- mean((yval-yhat)^2)
}
cvErr[nknots+1] <- mean(valErr)
}
return(cvErr)
}
cv_spline(x, y)
ns <- c(100,300,500,750)
reps <- 3
msePar <- c()
mseNonPar <- c()
for (n in ns)
{
mse <- apply(replicate(reps, sim.p3(fD, n)), mean, MARGIN = 1)
msePar <- c(msePar, mse[c(1:5, 12, 13)])
mseNonPar <- c(mseNonPar, mse[6:11])
}
ggplot(data = data.frame(x = rep(ns, each = 6), y = mseNonPar, fit = rep(c("NW box", "NW gauss", "LP box 1", "LP box 2", "LP gauss 1", "LP gauss 2"), length(ns))), aes(x = x, y = y, colour = fit)) + geom_point() + geom_line()
ggplot(data = data.frame(x = rep(ns, each = 7), y = msePar, fit = rep(c("linear", "poly 2", "poly 3", "poly 4", "poly 5", "bs", "ns"), length(ns))), aes(x = x, y = y, colour = fit)) + geom_point() + geom_line()
ggplot(data = data.frame(x = rep(ns, each = 6), y = mseNonPar, fit = rep(c("NW box", "NW gauss", "LP box 1", "LP box 2", "LP gauss 1", "LP gauss 2"), length(ns))), aes(x = x, y = y, colour = fit)) + geom_point() + geom_line()
ggplot(data = data.frame(x = rep(ns, each = 7), y = msePar, fit = rep(c("linear", "poly 2", "poly 3", "poly 4", "poly 5", "bs", "ns"), length(ns))), aes(x = x, y = y, colour = fit)) + geom_point() + geom_line()
sim.p3 <- function(f, n)
{
x <- runif(n)
err <- rnorm(n)
y <- f(x) + err
hs = seq(0.01, 0.6, 0.01)
mse <- rep(NA, 13)
yhat1 <- lm(y~x)$fitted.values
mse[1] <- mean((yhat1-f(x))^2)
for (d in 2:5)
{
yhatd <- lm(y~poly(x, d))$fitted.values
mse[d] <- mean((yhatd - f(x))^2)
}
#choose optimal bandwidth first
bw1 <- get_opt_h(x, y, hs, 5, "box")
nwbox <- ksmooth(x, y, kernel="box", bandwidth = bw1, x.points = x)
yhat6 <- nwbox$y
mse[6] <- mean((yhat6 - f(nwbox$x))^2)
bw2 <- get_opt_h(x, y, hs, 5, "normal")
nwgauss <- ksmooth(x, y, kernel="normal", bandwidth = bw2, x.points = x)
yhat7 <- nwgauss$y
mse[7] <- mean((yhat7 - f(nwgauss$x))^2)
fm1 <- formula(y~x)
fm2 <- formula(y~x+I(x^2))
bw3 <- get_opt_h(x, y, hs, 5, "box", 1)
yhat8 <- local_poly(fm1, bw3, kernel = box_kernel, envir = environment())
mse[8] <- mean((yhat8 - f(x))^2)
bw4 <- get_opt_h(x, y, hs, 5, "box", 2)
yhat9 <- local_poly(fm2, bw4, kernel = box_kernel, envir = environment())
mse[9] <- mean((yhat9 - f(x))^2)
bw5 <- get_opt_h(x, y, hs, 5, "normal", 1)
yhat10 <- local_poly(fm1, bw5, kernel = gaussian_kernel, envir = environment())
mse[10] <- mean((yhat10 - f(x))^2)
bw6 <- get_opt_h(x, y, hs, 5, "normal", 2)
yhat11 <- local_poly(fm2, bw6, kernel = gaussian_kernel, envir = environment())
mse[11] <- mean((yhat11 - f(x))^2)
#b-spline
cvBSpline <- cv_spline(x, y)
nknots1 <- order(cvBSpline)[1]-1
yhat12 <- lm(y~bs(x, df = nknots1 + 3))$fitted.values
mse[12] <- mean((yhat12-f(x))^2)
#natural spline
cvNSpline <- cv_spline(x, y, type = "n")
nknots2 <- order(cvNSpline)[1]-1
yhat13 <- lm(y~bs(x, df = nknots2 + 3))$fitted.values
mse[13] <- mean((yhat13-f(x))^2)
return(mse)
}
ns
ns <- c(100, 500, 750, 1000)
msePar <- c()
mseNonPar <- c()
for (n in ns)
{
mse <- apply(replicate(reps, sim.p3(fD, n)), mean, MARGIN = 1)
msePar <- c(msePar, mse[c(1:5, 12, 13)])
mseNonPar <- c(mseNonPar, mse[6:11])
}
ggplot(data = data.frame(x = rep(ns, each = 6), y = mseNonPar, fit = rep(c("NW box", "NW gauss", "LP box 1", "LP box 2", "LP gauss 1", "LP gauss 2"), length(ns))), aes(x = x, y = y, colour = fit)) + geom_point() + geom_line()
reps
sim.p3 <- function(f, n)
{
x <- runif(n)
err <- rnorm(n)
y <- f(x) + err
if (n <= 200)
{
hStart <- 0.05
}
else
{
hStart <- 0.01
}
hs = seq(hStart, 0.6, 0.01)
mse <- rep(NA, 13)
yhat1 <- lm(y~x)$fitted.values
mse[1] <- mean((yhat1-f(x))^2)
for (d in 2:5)
{
yhatd <- lm(y~poly(x, d))$fitted.values
mse[d] <- mean((yhatd - f(x))^2)
}
#choose optimal bandwidth first
bw1 <- get_opt_h(x, y, hs, 5, "box")
nwbox <- ksmooth(x, y, kernel="box", bandwidth = bw1, x.points = x)
yhat6 <- nwbox$y
mse[6] <- mean((yhat6 - f(nwbox$x))^2)
bw2 <- get_opt_h(x, y, hs, 5, "normal")
nwgauss <- ksmooth(x, y, kernel="normal", bandwidth = bw2, x.points = x)
yhat7 <- nwgauss$y
mse[7] <- mean((yhat7 - f(nwgauss$x))^2)
fm1 <- formula(y~x)
fm2 <- formula(y~x+I(x^2))
bw3 <- get_opt_h(x, y, hs, 5, "box", 1)
yhat8 <- local_poly(fm1, bw3, kernel = box_kernel, envir = environment())
mse[8] <- mean((yhat8 - f(x))^2)
bw4 <- get_opt_h(x, y, hs, 5, "box", 2)
yhat9 <- local_poly(fm2, bw4, kernel = box_kernel, envir = environment())
mse[9] <- mean((yhat9 - f(x))^2)
bw5 <- get_opt_h(x, y, hs, 5, "normal", 1)
yhat10 <- local_poly(fm1, bw5, kernel = gaussian_kernel, envir = environment())
mse[10] <- mean((yhat10 - f(x))^2)
bw6 <- get_opt_h(x, y, hs, 5, "normal", 2)
yhat11 <- local_poly(fm2, bw6, kernel = gaussian_kernel, envir = environment())
mse[11] <- mean((yhat11 - f(x))^2)
#b-spline
cvBSpline <- cv_spline(x, y)
nknots1 <- order(cvBSpline)[1]-1
yhat12 <- lm(y~bs(x, df = nknots1 + 3))$fitted.values
mse[12] <- mean((yhat12-f(x))^2)
#natural spline
cvNSpline <- cv_spline(x, y, type = "n")
nknots2 <- order(cvNSpline)[1]-1
yhat13 <- lm(y~bs(x, df = nknots2 + 3))$fitted.values
mse[13] <- mean((yhat13-f(x))^2)
return(list(mse, c(bw1, bw2, bw3, bw4, bw5, bw6)))
}
sim.p3(fA, 100)
sim.p3(fB, 100)
sim.p3(fC, 100)
sim.p3(fD, 100)
sim.p3(fD, 200)
plot(ggcLassoFit)
ns <- c(100, 200)
reps <- 2
msePar <- c()
mseNonPar <- c()
for (n in ns)
{
mse <- apply(replicate(reps, sim.p3(fA, n)), mean, MARGIN = 1)
msePar <- c(msePar, mse[c(1:5, 12, 13)])
mseNonPar <- c(mseNonPar, mse[6:11])
}
ggplot(data = data.frame(x = rep(ns, each = 7), y = msePar, fit = rep(c("linear", "poly 2", "poly 3", "poly 4", "poly 5", "bs", "ns"), length(ns))), aes(x = x, y = y, colour = fit)) + geom_point() + geom_line()
msePar
